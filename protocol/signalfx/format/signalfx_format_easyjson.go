// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package signalfxformat

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat(in *jlexer.Lexer, out *JSONDatapointV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(JSONDatapointV2)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 []*BodySendFormatV2
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				in.Delim('[')
				if v1 == nil {
					if !in.IsDelim(']') {
						v1 = make([]*BodySendFormatV2, 0, 8)
					} else {
						v1 = []*BodySendFormatV2{}
					}
				} else {
					v1 = (v1)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *BodySendFormatV2
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(BodySendFormatV2)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					v1 = append(v1, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat(out *jwriter.Writer, in JSONDatapointV2) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v3First := true
		for v3Name, v3Value := range in {
			if v3First {
				v3First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v3Name))
			out.RawByte(':')
			if v3Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v4, v5 := range v3Value {
					if v4 > 0 {
						out.RawByte(',')
					}
					if v5 == nil {
						out.RawString("null")
					} else {
						(*v5).MarshalEasyJSON(out)
					}
				}
				out.RawByte(']')
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JSONDatapointV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONDatapointV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONDatapointV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONDatapointV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat1(in *jlexer.Lexer, out *JSONDatapointV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "metric":
			out.Metric = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat1(out *jwriter.Writer, in JSONDatapointV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"metric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Metric))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONDatapointV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONDatapointV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONDatapointV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONDatapointV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat1(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat2(in *jlexer.Lexer, out *BodySendFormatV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric":
			out.Metric = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		case "dimensions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Dimensions = make(map[string]string)
				} else {
					out.Dimensions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.Dimensions)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Properties = make(map[string]ValueToSend)
				} else {
					out.Properties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 ValueToSend
					if m, ok := v7.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v7.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v7 = in.Interface()
					}
					(out.Properties)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat2(out *jwriter.Writer, in BodySendFormatV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Metric))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	{
		const prefix string = ",\"dimensions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Dimensions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Dimensions {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"properties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Properties == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Properties {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if m, ok := v9Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BodySendFormatV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BodySendFormatV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxMetricproxyProtocolSignalfxFormat2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BodySendFormatV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BodySendFormatV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxMetricproxyProtocolSignalfxFormat2(l, v)
}
